[1mdiff --git a/.nvmrc b/.nvmrc[m
[1mnew file mode 100644[m
[1mindex 0000000..622e363[m
[1m--- /dev/null[m
[1m+++ b/.nvmrc[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m18[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/ENV_QUICK_REFERENCE.md b/ENV_QUICK_REFERENCE.md[m
[1mnew file mode 100644[m
[1mindex 0000000..dd53333[m
[1m--- /dev/null[m
[1m+++ b/ENV_QUICK_REFERENCE.md[m
[36m@@ -0,0 +1,85 @@[m
[32m+[m[32m# Environment Variables Quick Reference[m
[32m+[m
[32m+[m[32m## üöÄ For Vercel Deployment[m
[32m+[m
[32m+[m[32m### Required Variables (Set in Vercel Dashboard)[m
[32m+[m
[32m+[m[32m| Variable | Description | Example |[m
[32m+[m[32m|----------|-------------|---------|[m
[32m+[m[32m| `VITE_API_BASE_URL` | Frontend API endpoint | `https://your-app.vercel.app/api` |[m
[32m+[m[32m| `VITE_GEMINI_API_KEY` | Gemini API key for frontend | `AIzaSy...` |[m
[32m+[m[32m| `JWT_SECRET` | JWT authentication secret | `your-super-secure-secret-here` |[m
[32m+[m[32m| `GEMINI_API_KEY` | Gemini API key for backend | `AIzaSy...` |[m
[32m+[m
[32m+[m[32m### Optional Variables[m
[32m+[m
[32m+[m[32m| Variable | Description | When to Use |[m
[32m+[m[32m|----------|-------------|-------------|[m
[32m+[m[32m| `GOOGLE_CLIENT_ID` | Google OAuth client ID | If using Google login |[m
[32m+[m[32m| `GOOGLE_CLIENT_SECRET` | Google OAuth client secret | If using Google login |[m
[32m+[m[32m| `NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY` | Clerk publishable key | If using Clerk auth |[m
[32m+[m[32m| `CLERK_SECRET_KEY` | Clerk secret key | If using Clerk auth |[m
[32m+[m[32m| `VITE_DEBUG` | Enable debug mode | For development/testing |[m
[32m+[m
[32m+[m[32m## üîß How to Set in Vercel[m
[32m+[m
[32m+[m[32m### Method 1: Vercel Dashboard[m
[32m+[m[32m1. Go to your project in Vercel dashboard[m
[32m+[m[32m2. Click "Settings" ‚Üí "Environment Variables"[m
[32m+[m[32m3. Click "Add New"[m
[32m+[m[32m4. Enter variable name and value[m
[32m+[m[32m5. Select environment (Production/Preview/Development)[m
[32m+[m[32m6. Click "Save"[m
[32m+[m
[32m+[m[32m### Method 2: Vercel CLI[m
[32m+[m[32m```bash[m
[32m+[m[32m# Add environment variables[m
[32m+[m[32mvercel env add VITE_API_BASE_URL[m
[32m+[m[32mvercel env add JWT_SECRET[m
[32m+[m[32mvercel env add GEMINI_API_KEY[m
[32m+[m
[32m+[m[32m# Deploy[m
[32m+[m[32mvercel --prod[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üõ†Ô∏è Local Development[m
[32m+[m
[32m+[m[32mCreate a `.env` file in your project root:[m
[32m+[m[32m```bash[m
[32m+[m[32mVITE_API_BASE_URL=http://localhost:5000[m
[32m+[m[32mVITE_GEMINI_API_KEY=your_gemini_api_key[m
[32m+[m[32mVITE_DEBUG=true[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üîç Troubleshooting[m
[32m+[m
[32m+[m[32m### Common Issues:[m
[32m+[m[32m- **"VITE_ variables not found"**: Ensure variables are prefixed with `VITE_`[m
[32m+[m[32m- **"API key not working"**: Verify key is correct and has proper permissions[m
[32m+[m[32m- **"JWT errors"**: Use a strong, unique JWT secret[m
[32m+[m
[32m+[m[32m### Debug Commands:[m
[32m+[m[32m```javascript[m
[32m+[m[32m// Frontend (browser console)[m
[32m+[m[32mconsole.log(import.meta.env);[m
[32m+[m
[32m+[m[32m// Backend (server logs)[m
[32m+[m[32mconsole.log(process.env);[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üìã Deployment Checklist[m
[32m+[m
[32m+[m[32m- [ ] Set `VITE_API_BASE_URL` to production URL[m
[32m+[m[32m- [ ] Add `VITE_GEMINI_API_KEY` for AI features[m
[32m+[m[32m- [ ] Set `JWT_SECRET` for authentication[m
[32m+[m[32m- [ ] Configure `GEMINI_API_KEY` for backend[m
[32m+[m[32m- [ ] Test deployment with `vercel --prod`[m
[32m+[m[32m- [ ] Verify all features work in production[m
[32m+[m
[32m+[m[32m## üö® Security Notes[m
[32m+[m
[32m+[m[32m- Never commit API keys to Git[m
[32m+[m[32m- Use different keys for dev/prod[m
[32m+[m[32m- Rotate keys regularly[m
[32m+[m[32m- Use strong JWT secrets[m
[32m+[m[32m- Monitor for unauthorized usage[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/VERCEL_ENV_SETUP.md b/VERCEL_ENV_SETUP.md[m
[1mnew file mode 100644[m
[1mindex 0000000..e73e136[m
[1m--- /dev/null[m
[1m+++ b/VERCEL_ENV_SETUP.md[m
[36m@@ -0,0 +1,181 @@[m
[32m+[m[32m# Vercel Environment Variables Setup Guide[m
[32m+[m
[32m+[m[32m## Overview[m
[32m+[m[32mThis guide explains how to set up environment variables for your Vercel deployment.[m
[32m+[m
[32m+[m[32m## Environment Variables Structure[m
[32m+[m
[32m+[m[32m### Frontend Variables (Vite/React)[m
[32m+[m[32mThese are prefixed with `VITE_` and are accessible in your React application:[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# API Configuration[m
[32m+[m[32mVITE_API_BASE_URL=https://your-vercel-domain.vercel.app/api[m
[32m+[m
[32m+[m[32m# AI Services[m
[32m+[m[32mVITE_GEMINI_API_KEY=your_gemini_api_key_here[m
[32m+[m
[32m+[m[32m# Debug Mode[m
[32m+[m[32mVITE_DEBUG=false[m
[32m+[m
[32m+[m[32m# Authentication (if using Clerk)[m
[32m+[m[32mNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Backend Variables (Node.js/Express)[m
[32m+[m[32mThese are used by your Express server and are set in Vercel dashboard:[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# JWT Authentication[m
[32m+[m[32mJWT_SECRET=your_very_secure_jwt_secret_key_here[m
[32m+[m
[32m+[m[32m# Google OAuth (if using)[m
[32m+[m[32mGOOGLE_CLIENT_ID=your_google_client_id[m
[32m+[m[32mGOOGLE_CLIENT_SECRET=your_google_client_secret[m
[32m+[m
[32m+[m[32m# AI Services[m
[32m+[m[32mGEMINI_API_KEY=your_gemini_api_key[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## How to Set Environment Variables in Vercel[m
[32m+[m
[32m+[m[32m### Method 1: Vercel Dashboard (Recommended)[m
[32m+[m
[32m+[m[32m1. **Go to Vercel Dashboard**[m
[32m+[m[32m   - Visit [vercel.com](https://vercel.com)[m
[32m+[m[32m   - Select your project[m
[32m+[m
[32m+[m[32m2. **Navigate to Settings**[m
[32m+[m[32m   - Click on your project[m
[32m+[m[32m   - Go to "Settings" tab[m
[32m+[m[32m   - Click "Environment Variables"[m
[32m+[m
[32m+[m[32m3. **Add Variables**[m
[32m+[m[32m   - Click "Add New"[m
[32m+[m[32m   - Enter variable name and value[m
[32m+[m[32m   - Select environment (Production, Preview, Development)[m
[32m+[m[32m   - Click "Save"[m
[32m+[m
[32m+[m[32m### Method 2: Vercel CLI[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Install Vercel CLI[m
[32m+[m[32mnpm i -g vercel[m
[32m+[m
[32m+[m[32m# Login to Vercel[m
[32m+[m[32mvercel login[m
[32m+[m
[32m+[m[32m# Add environment variables[m
[32m+[m[32mvercel env add VITE_API_BASE_URL[m
[32m+[m[32mvercel env add JWT_SECRET[m
[32m+[m[32mvercel env add GEMINI_API_KEY[m
[32m+[m
[32m+[m[32m# Deploy with environment variables[m
[32m+[m[32mvercel --prod[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Required Environment Variables[m
[32m+[m
[32m+[m[32m### For Production Deployment[m
[32m+[m
[32m+[m[32m#### Frontend Variables (set in Vercel dashboard):[m
[32m+[m[32m```bash[m
[32m+[m[32mVITE_API_BASE_URL=https://your-vercel-domain.vercel.app/api[m
[32m+[m[32mVITE_GEMINI_API_KEY=your_gemini_api_key[m
[32m+[m[32mVITE_DEBUG=false[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m#### Backend Variables (set in Vercel dashboard):[m
[32m+[m[32m```bash[m
[32m+[m[32mJWT_SECRET=your_very_secure_jwt_secret_key_here[m
[32m+[m[32mGEMINI_API_KEY=your_gemini_api_key[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Optional Variables (if using these features):[m
[32m+[m[32m```bash[m
[32m+[m[32m# Google OAuth[m
[32m+[m[32mGOOGLE_CLIENT_ID=your_google_client_id[m
[32m+[m[32mGOOGLE_CLIENT_SECRET=your_google_client_secret[m
[32m+[m
[32m+[m[32m# Clerk Authentication[m
[32m+[m[32mNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key[m
[32m+[m[32mCLERK_SECRET_KEY=your_clerk_secret_key[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Security Best Practices[m
[32m+[m
[32m+[m[32m1. **Never commit API keys to Git**[m
[32m+[m[32m   - Use environment variables for all sensitive data[m
[32m+[m[32m   - Keep `.env` files in `.gitignore`[m
[32m+[m
[32m+[m[32m2. **Use strong secrets**[m
[32m+[m[32m   - Generate secure JWT secrets[m
[32m+[m[32m   - Use different keys for development and production[m
[32m+[m
[32m+[m[32m3. **Rotate keys regularly**[m
[32m+[m[32m   - Update API keys periodically[m
[32m+[m[32m   - Monitor for unauthorized usage[m
[32m+[m
[32m+[m[32m## Testing Environment Variables[m
[32m+[m
[32m+[m[32m### Local Development[m
[32m+[m[32m```bash[m
[32m+[m[32m# Copy example file[m
[32m+[m[32mcp env.example .env[m
[32m+[m
[32m+[m[32m# Edit .env file with your values[m
[32m+[m[32m# Then run your development server[m
[32m+[m[32mnpm run dev[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Production Testing[m
[32m+[m[32m```bash[m
[32m+[m[32m# Test with Vercel CLI[m
[32m+[m[32mvercel env pull .env.local[m
[32m+[m[32mvercel dev[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Troubleshooting[m
[32m+[m
[32m+[m[32m### Common Issues:[m
[32m+[m
[32m+[m[32m1. **"VITE_ variables not found"**[m
[32m+[m[32m   - Ensure variables are prefixed with `VITE_`[m
[32m+[m[32m   - Check that variables are set in Vercel dashboard[m
[32m+[m
[32m+[m[32m2. **"API key not working"**[m
[32m+[m[32m   - Verify API key is correct[m
[32m+[m[32m   - Check if key has proper permissions[m
[32m+[m[32m   - Ensure key is set for correct environment[m
[32m+[m
[32m+[m[32m3. **"JWT errors"**[m
[32m+[m[32m   - Verify JWT_SECRET is set[m
[32m+[m[32m   - Use a strong, unique secret[m
[32m+[m[32m   - Check if secret is consistent across deployments[m
[32m+[m
[32m+[m[32m### Debug Commands:[m
[32m+[m[32m```bash[m
[32m+[m[32m# Check environment variables in browser console[m
[32m+[m[32mconsole.log(import.meta.env);[m
[32m+[m
[32m+[m[32m# Check backend environment variables[m
[32m+[m[32mconsole.log(process.env);[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## Deployment Checklist[m
[32m+[m
[32m+[m[32m- [ ] Set `VITE_API_BASE_URL` to production URL[m
[32m+[m[32m- [ ] Add `VITE_GEMINI_API_KEY` for AI features[m
[32m+[m[32m- [ ] Set `JWT_SECRET` for authentication[m
[32m+[m[32m- [ ] Configure `GEMINI_API_KEY` for backend[m
[32m+[m[32m- [ ] Test deployment with `vercel --prod`[m
[32m+[m[32m- [ ] Verify all features work in production[m
[32m+[m
[32m+[m[32m## Support[m
[32m+[m
[32m+[m[32mIf you encounter issues:[m
[32m+[m[32m1. Check Vercel deployment logs[m
[32m+[m[32m2. Verify environment variables are set correctly[m
[32m+[m[32m3. Test locally with `vercel dev`[m
[32m+[m[32m4. Check browser console for frontend errors[m
[32m+[m[32m5. Check server logs for backend errors[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/deploy-vercel.sh b/deploy-vercel.sh[m
[1mnew file mode 100644[m
[1mindex 0000000..3c9af66[m
[1m--- /dev/null[m
[1m+++ b/deploy-vercel.sh[m
[36m@@ -0,0 +1,112 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32m# Vercel Deployment Script[m
[32m+[m[32m# This script helps you deploy your project to Vercel with proper environment variables[m
[32m+[m
[32m+[m[32mecho "üöÄ Starting Vercel Deployment Setup..."[m
[32m+[m
[32m+[m[32m# Check if Vercel CLI is installed[m
[32m+[m[32mif ! command -v vercel &> /dev/null; then[m
[32m+[m[32m    echo "üì¶ Installing Vercel CLI..."[m
[32m+[m[32m    npm install -g vercel[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32m# Check if user is logged in to Vercel[m
[32m+[m[32mif ! vercel whoami &> /dev/null; then[m
[32m+[m[32m    echo "üîê Please login to Vercel..."[m
[32m+[m[32m    vercel login[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mecho "üìù Setting up environment variables..."[m
[32m+[m
[32m+[m[32m# Function to prompt for environment variable[m
[32m+[m[32mprompt_env_var() {[m
[32m+[m[32m    local var_name=$1[m
[32m+[m[32m    local description=$2[m
[32m+[m[32m    local current_value=$3[m
[32m+[m[41m    [m
[32m+[m[32m    echo ""[m
[32m+[m[32m    echo "üîß $description"[m
[32m+[m[32m    if [ ! -z "$current_value" ]; then[m
[32m+[m[32m        echo "Current value: $current_value"[m
[32m+[m[32m        read -p "Enter new value (or press Enter to keep current): " new_value[m
[32m+[m[32m        if [ ! -z "$new_value" ]; then[m
[32m+[m[32m            echo "$var_name=$new_value" >> .env.local[m
[32m+[m[32m        fi[m
[32m+[m[32m    else[m
[32m+[m[32m        read -p "Enter value for $var_name: " new_value[m
[32m+[m[32m        if [ ! -z "$new_value" ]; then[m
[32m+[m[32m            echo "$var_name=$new_value" >> .env.local[m
[32m+[m[32m        fi[m
[32m+[m[32m    fi[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# Create .env.local file if it doesn't exist[m
[32m+[m[32mtouch .env.local[m
[32m+[m
[32m+[m[32m# Prompt for required environment variables[m
[32m+[m[32mprompt_env_var "VITE_API_BASE_URL" "Frontend API Base URL (e.g., https://your-domain.vercel.app/api)" ""[m
[32m+[m[32mprompt_env_var "VITE_GEMINI_API_KEY" "Gemini API Key for frontend" ""[m
[32m+[m[32mprompt_env_var "JWT_SECRET" "JWT Secret for authentication (generate a strong random string)" ""[m
[32m+[m[32mprompt_env_var "GEMINI_API_KEY" "Gemini API Key for backend" ""[m
[32m+[m
[32m+[m[32mecho ""[m
[32m+[m[32mecho "üìã Optional environment variables:"[m
[32m+[m[32mread -p "Do you want to set up Google OAuth? (y/n): " setup_google[m
[32m+[m[32mif [ "$setup_google" = "y" ]; then[m
[32m+[m[32m    prompt_env_var "GOOGLE_CLIENT_ID" "Google OAuth Client ID" ""[m
[32m+[m[32m    prompt_env_var "GOOGLE_CLIENT_SECRET" "Google OAuth Client Secret" ""[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mread -p "Do you want to set up Clerk authentication? (y/n): " setup_clerk[m
[32m+[m[32mif [ "$setup_clerk" = "y" ]; then[m
[32m+[m[32m    prompt_env_var "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" "Clerk Publishable Key" ""[m
[32m+[m[32m    prompt_env_var "CLERK_SECRET_KEY" "Clerk Secret Key" ""[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mecho ""[m
[32m+[m[32mecho "üîß Building project..."[m
[32m+[m[32mnpm run build[m
[32m+[m
[32m+[m[32mecho ""[m
[32m+[m[32mecho "üöÄ Deploying to Vercel..."[m
[32m+[m[32mecho "Choose deployment option:"[m
[32m+[m[32mecho "1. Deploy to production"[m
[32m+[m[32mecho "2. Deploy to preview"[m
[32m+[m[32mecho "3. Just set up environment variables"[m
[32m+[m
[32m+[m[32mread -p "Enter your choice (1-3): " deploy_choice[m
[32m+[m
[32m+[m[32mcase $deploy_choice in[m
[32m+[m[32m    1)[m
[32m+[m[32m        echo "üöÄ Deploying to production..."[m
[32m+[m[32m        vercel --prod[m
[32m+[m[32m        ;;[m
[32m+[m[32m    2)[m
[32m+[m[32m        echo "üöÄ Deploying to preview..."[m
[32m+[m[32m        vercel[m
[32m+[m[32m        ;;[m
[32m+[m[32m    3)[m
[32m+[m[32m        echo "üìù Setting up environment variables only..."[m
[32m+[m[32m        echo "You can deploy later with: vercel --prod"[m
[32m+[m[32m        ;;[m
[32m+[m[32m    *)[m
[32m+[m[32m        echo "‚ùå Invalid choice"[m
[32m+[m[32m        exit 1[m
[32m+[m[32m        ;;[m
[32m+[m[32mesac[m
[32m+[m
[32m+[m[32mecho ""[m
[32m+[m[32mecho "‚úÖ Deployment setup complete!"[m
[32m+[m[32mecho ""[m
[32m+[m[32mecho "üìã Next steps:"[m
[32m+[m[32mecho "1. Check your Vercel dashboard for the deployment"[m
[32m+[m[32mecho "2. Verify all environment variables are set correctly"[m
[32m+[m[32mecho "3. Test your application functionality"[m
[32m+[m[32mecho "4. Update your domain settings if needed"[m
[32m+[m[32mecho ""